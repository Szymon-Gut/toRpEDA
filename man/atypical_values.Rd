% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/atypical_values.R
\name{atypical_values}
\alias{atypical_values}
\title{Atypilac values analyses columns with character data and check if they can
be different data type: if it is int vector transformed to string - "integer",
vector containing 'false' and 'true'  or 'yes'
and 'no' with different abbreviations and capitalizations that may indicate that
vector could be transform to boolean - "boolean", and if numeric values were
written with coma instead of dot.
Results are presented in a list with performed
analyses that contain column names.}
\usage{
atypical_values(df, variables, analyses)
}
\arguments{
\item{df}{- A data frame}

\item{variables}{- A char vector containing names of columns in
a data frame, for which the analysis will be performed}

\item{analyses}{- A char vector containing names of analyses which
will be performed on data frame}
}
\value{
List with boolean vectors for types int or numeric and numeric vector
with 1 indicating 'true' and 'false', 2 for 'yes' and 'no'.
}
\description{
Atypilac values analyses columns with character data and check if they can
be different data type: if it is int vector transformed to string - "integer",
vector containing 'false' and 'true'  or 'yes'
and 'no' with different abbreviations and capitalizations that may indicate that
vector could be transform to boolean - "boolean", and if numeric values were
written with coma instead of dot.
Results are presented in a list with performed
analyses that contain column names.
}
\examples{
yes_no <- c("yES", "n",'y',"No",'yes',"nO")
true_false <- c('f','t','TrUe','FaLsE')

df <- data.frame(
 'a' = gsub('\\\\.',',',as.character(rnorm(10))),
 'b' = c(gsub('\\\\.',',',as.character(rnorm(5))),rnorm(5)),
 'c' = as.character(c(TRUE,FALSE), replace=TRUE, size=10),
 'd' = sample(yes_no, 10, replace=TRUE),
 'e' = sample(true_false,10, replace=TRUE),
 'f' = c(sample(yes_no,5, replace=TRUE),sample(true_false,5, replace=TRUE)),
 'g' = as.character(sample(1:100,10))
)
atypical_values(df,analyses = c("integer","boolean"))
atypical_values(df, variables = c('a','d','e'))

}
